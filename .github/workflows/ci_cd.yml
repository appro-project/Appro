name: Deploy to Appro

on: [workflow_dispatch]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: Test SSH connection
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.Appro_IP }} "echo 'SSH connection successful'"

    - name: Clean directory on EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.Appro_IP }} "rm -rf /home/ubuntu/appro/app/*"

    - name: Copy files to EC2
      run: |
        scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -r ./* ubuntu@${{ secrets.Appro_IP }}:/home/ubuntu/appro/app

    - name: Check and free port 80
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.Appro_IP }} << 'EOF'
          PID=$(sudo lsof -t -i:80)
          if [ -n "$PID" ]; then
            echo "Port 80 is occupied by process $PID. Terminating process."
            sudo kill -9 $PID
          else
            echo "Port 80 is free."
          fi

          PID=$(sudo lsof -t -i:3000)
          if [ -n "$PID" ]; then
            echo "Port 3000 is occupied by process $PID. Terminating process."
            sudo kill -9 $PID
          else
            echo "Port 3000 is free."
          fi
        EOF

    - name: Install client dependencies
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.Appro_IP }} << 'EOF'
          cd /home/ubuntu/appro/app/client
          # echo "Running npm install --legacy-peer-deps --force "
          # npm install --no-optional --legacy-peer-deps --force > /home/ubuntu/appro/client_install.log 2>&1
          echo "Running yarn install "
          yarn install --legacy-peer-deps --force > /home/ubuntu/appro/client_install.log 2>&1
        EOF

    - name: Install additional types & types/jest
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.Appro_IP }} << 'EOF'
          cd /home/ubuntu/appro/app/client
          echo "Running npm install @types/node --legacy-peer-deps"
          # npm install @types/node --legacy-peer-deps >> /home/ubuntu/appro/client_install.log 2>&1
          yarn -D add @types/jest >> /home/ubuntu/appro/client_install.log 2>&1
        EOF

    - name: Build client
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.Appro_IP }} << 'EOF'
          cd /home/ubuntu/appro/app/client

          echo "Building client"
          npm run build >> /home/ubuntu/appro/client_install.log 2>&1
        EOF

    - name: Prepare application.yml on EC2
      run: |
         ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.Appro_IP }} << 'EOF'
           cd /home/ubuntu/appro/app/appro-back/src/main/resources
           sed -i "s/\${SERVER_PORT}/${{ secrets.SERVER_PORT }}/g" application.yml
           sed -i "s|\${APPRO_DB_URL}|${{ secrets.APPRO_DB_URL }}|g" application.yml
           sed -i "s/\${DB_USERNAME}/${{ secrets.DB_USERNAME }}/g" application.yml
           sed -i "s/\${DB_PASSWORD}/${{ secrets.DB_PASSWORD }}/g" application.yml
           sed -i "s/\${APPRO_EMAIL}/${{ secrets.APPRO_EMAIL }}/g" application.yml
           sed -i "s/\${APPRO_EMAIL_API_KEY}/${{ secrets.APPRO_EMAIL_API_KEY }}/g" application.yml
           sed -i "s/\${AWS_BUCKET_NAME}/${{ secrets.AWS_BUCKET_NAME }}/g" application.yml
           sed -i "s/\${AWS_ACCESS_KEY}/${{ secrets.AWS_ACCESS_KEY }}/g" application.yml
           sed -i "s/\${AWS_ACCESS_SECRET_KEY}/${{ secrets.AWS_ACCESS_SECRET_KEY }}/g" application.yml
           sed -i "s|\${TELEGRAM_URI}|${{ secrets.TELEGRAM_URI }}|g" application.yml
           sed -i "s/\${TELEGRAM_CHAT_ID}/${{ secrets.TELEGRAM_CHAT_ID }}/g" application.yml
         EOF
    
    - name: Build and run backend on EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.Appro_IP }} << 'EOF'
          cd /home/ubuntu/appro/app/appro-back
          
          export APPRO_DB_URL="${{ secrets.APPRO_DB_URL }}"
          export DB_USERNAME="${{ secrets.DB_USERNAME }}"
          export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"

          export MAVEN_HOME=/home/ubuntu/appro/mvn
          export PATH=$MAVEN_HOME/bin:$PATH

          chmod +x mvnw

          echo "Running Flyway migrations with the following configuration:"
          cat src/main/resources/application.yml
          
          ./mvnw flyway:migrate -Dflyway.url=${APPRO_DB_URL} -Dflyway.user=${DB_USERNAME} -Dflyway.password=${DB_PASSWORD}
          
          mvn clean package -DskipTests
          if [ $? -ne 0 ]; then
            echo "Error: mvn package failed."
            exit 1
          fi
          
          sudo nohup java -jar target/appro-back.jar > /home/ubuntu/appro/server.log 2>&1 &
          echo "Backend is running successfully."
        EOF
